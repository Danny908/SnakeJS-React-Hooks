{"version":3,"sources":["shared/left_arrow/LeftArrow.js","menu/Menu.js","game-board/GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["LeftArrow","props","active","className","xmlns","viewBox","d","fill","Menu","onUpdateScreen","idMenu","useState","option","setOption","menuOpts","activeMenu","i","menus","push","key","onMouseEnter","onMouseLeave","onClick","length","renderMenus","href","target","rel","height","width","GameBoard","canvasRef","onScore","ctrls","x","y","snake","setSnake","ctrl","setControl","food","setFood","end","setEnd","drawSnake","ctx","forEach","s","beginPath","fillStyle","strokeStyle","fillRect","strokeRect","updateSnake","_snake","map","head","tilesX","tilesY","snakeMove","some","JSON","stringify","randomizer","limit","Math","floor","random","drawFood","special","isFoodEaten","a","b","unshift","gameOver","txt","font","txtWidth","measureText","fillText","strokeText","setTimeout","useEffect","updateFood","interval","setInterval","getContext","tile","draw","clearInterval","tabIndex","onKeyUp","e","keyCode","keyboardCtrls","ref","focus","App","screen","setScreen","score","setScore","screens","updateScore","updateScreen","val","getScreen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAGO,SAASA,EAAUC,GACxB,IAAMC,EAASD,EAAMC,OAErB,OACE,yBACEC,UAAWD,EAAS,YAAc,qBAClCE,MAAM,6BACNC,QAAQ,aAER,0BAAMC,EAAE,wCACR,0BAAMA,EAAE,gBAAgBC,KAAK,UCwCpBC,MAhDf,YAA2C,IAA3BC,EAA0B,EAA1BA,eAAgBC,EAAU,EAAVA,OAAU,EACZC,mBAAS,MADG,mBACjCC,EADiC,KACzBC,EADyB,KAElCC,EAAW,CAAC,YAEZC,EAAa,SAACC,GAClBH,EAAUG,IAsBZ,OACE,yBAAKb,UAAU,aACb,yBAAKA,UAAU,gBACb,6BAtBc,WAElB,IADA,IAAIc,EAAQ,GADY,WAEfD,GACPC,EAAMC,KACJ,wBACEC,IAAKH,EACLI,aAAc,kBAAML,EAAWC,IAC/BK,aAAc,kBAAMN,EAAW,OAC/BO,QAAS,kBAAMb,EAAeC,KAE7B,kBAAC,EAAD,CAAWR,OAAQc,IAAMJ,IACzBE,EAASE,MATPA,EAAI,EAAGA,EAAIF,EAASS,OAAQP,IAAM,EAAlCA,GAcT,OAAOC,EAMGO,KAER,uBACEC,KAAK,kDACLC,OAAO,SACPC,IAAI,uBAEJ,yBAAKC,OAAO,KAAKvB,QAAQ,YAAYwB,MAAM,MACzC,0BACEtB,KAAK,UACLD,EAAE,wwB,MCgMCwB,MA1Of,YAAyD,IACnDC,EADeC,EAAmC,EAAnCA,QAASvB,EAA0B,EAA1BA,eAAgBC,EAAU,EAAVA,OAYtCuB,EACE,GADFA,EAEA,GAFAA,EAGG,GAHHA,EAIE,GAhB8C,EAmB5BtB,mBAAS,CACjC,CAAEuB,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,IACZ,CAAED,EAAG,GAAIC,EAAG,MAvBwC,mBAmB/CC,EAnB+C,KAmBxCC,EAnBwC,OA0B3B1B,mBAASsB,GA1BkB,mBA0B/CK,EA1B+C,KA0BzCC,EA1ByC,OA2B9B5B,mBAAS,MA3BqB,mBA2B/C6B,EA3B+C,KA2BzCC,EA3ByC,OA4BhC9B,oBAAS,GA5BuB,mBA4B/C+B,EA5B+C,KA4B1CC,EA5B0C,KA2ChDC,EAAY,SAACC,GAEjBT,EAAMU,SAAQ,SAACC,EAAG/B,GAChB6B,EAAIG,YACJH,EAAII,UAAYjC,IAAMoB,EAAMb,OAAS,EAAI,UAAY,aACrDsB,EAAIK,YAAc,UAClB,IAAMhB,EA9CG,GA8CQa,EAAEb,EACbC,EA/CG,GA+CQY,EAAEZ,EACnBU,EAAIM,SAASjB,EAAGC,EAhDP,OAiDTU,EAAIO,WAAWlB,EAAGC,EAjDT,WA4EPkB,EAAc,WAClB,IAAMC,EAASlB,EAAMmB,KAAI,SAACR,EAAG/B,GAM3B,OAJE+B,EADE/B,EAAI,EAAIoB,EAAMb,OACZa,EAAMpB,EAAI,GAzBF,SAACwC,GAAU,IACrBtB,EAASsB,EAATtB,EAAGC,EAAMqB,EAANrB,EACT,OAAQG,GACN,KAAKL,EACHC,EAAIA,EAAI,EAAI,EAAIuB,GAAavB,EAAI,EACjC,MACF,KAAKD,EACHE,EAAIA,EAAI,EAAI,EAAIuB,GAAavB,EAAI,EACjC,MACF,KAAKF,EACHC,EAAIA,EAAI,EAAIuB,GAAa,EAAIvB,EAAI,EACjC,MACF,KAAKD,EACHE,EAAIA,EAAI,EAAIuB,GAAa,EAAIvB,EAAI,EACjC,MACF,QACED,EAAIA,EAAI,EAAIuB,GAAa,EAAIvB,EAAI,EAGrC,MAAO,CAAEA,IAAGC,KAQJwB,CAAUZ,MAOhBO,EAAOM,MAAK,SAACb,EAAG/B,GACd,OAAIA,IAAMsC,EAAO/B,OAAS,GAEtBsC,KAAKC,UAAUR,EAAOA,EAAO/B,OAAS,MAAQsC,KAAKC,UAAUf,OAMnEJ,GAAO,GAETN,EAASiB,IAsBLS,EAAa,SAACC,GAElB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,IAgB9BI,EAAW,SAACvB,GAChB,IAAIX,EACAC,EAGAK,IACFN,EAjJS,GAiJEM,EAAKN,EAChBC,EAlJS,GAkJEK,EAAKL,EAChBU,EAAIG,YACJH,EAAII,UAAYT,EAAK6B,QAAU,SAAW,MAC1CxB,EAAIM,SAASjB,EAAGC,EArJP,SA+JPmC,EAAc,WAClB,GANiBC,EAMHnC,EAAMA,EAAMb,OAAS,GANfiD,EAMmB,CAAEtC,EAAGM,EAAKN,EAAGC,EAAGK,EAAKL,GALrD0B,KAAKC,UAAUS,KAAOV,KAAKC,UAAUU,GAKsB,CAEhE,IAAMlB,EAASlB,EAAMmB,KAAI,SAACR,GAAD,OAAOA,KAEhCN,EAAQ,MAERT,EAAQQ,EAAK6B,QAAU,EAAI,GAE3Bf,EAAOmB,QAAQnB,EAAO,IACtBjB,EAASiB,GAfK,IAACiB,EAAGC,GAoBhBE,EAAW,SAAC7B,GAChB,IAAM8B,EAAM,eACZ9B,EAAIG,YACJH,EAAI+B,KAAO,kBACX/B,EAAII,UAAY,aAChBJ,EAAIK,YAAc,UALM,IAMT2B,EAAahC,EAAIiC,YAAYH,GAApC9C,MACRgB,EAAIkC,SAASJ,EAAK9C,IAAYgD,EAAW,EAAG,KAC5ChC,EAAImC,WAAWL,EAAK9C,IAAYgD,EAAW,EAAG,KAG9CI,YAAW,kBAAMxE,EAAeC,KAAS,OA8B3C,OA3BAwE,qBAAU,WAEH1C,GAhEY,SAAb2C,IACJ,IAAMjD,EAAI6B,EA7HG,IA8HP5B,EAAI4B,EA7HG,IA+HPM,EAA6B,IAAnBN,EAAW,IAGvB3B,EAAMwB,MAAK,SAACb,GAAD,OAAOc,KAAKC,UAAUf,KAAOc,KAAKC,UAAU,CAAE5B,IAAGC,UAC9DgD,IAEF1C,EAAQ,CAAEP,IAAGC,IAAGkC,YAuDdc,KAED,CAAC3C,IAEJ0C,qBAAU,WAER7B,MACC,CAACf,IAEJ4C,qBAAU,WACR,IAAIE,EAWJ,OAVK1C,IAEH0C,EArGFC,aAAY,WACVhC,MAjGS,MAwMPb,GACF8B,IArLS,WACX,IAAMzB,EAAMd,EAAUuD,WAAW,MAEjCzC,EAAIG,YACJH,EAAII,UAAY,UAChBJ,EAAIM,SAAS,EAAG,EA5BJoC,IACCA,KA4Bb3C,EAAUC,GACVuB,EAASvB,GACLH,GACFgC,EAAS7B,GA+KX2C,GACO,kBAAMC,cAAcL,OAI3B,4BACEM,SAAS,IACTC,QAAS,SAACC,GAAD,OA/GS,SAACA,GACjBA,EAAEC,UAAYvD,IAGbsD,EAAEC,UAAY5D,GAAcK,IAASL,GACrC2D,EAAEC,UAAY5D,GAAeK,IAASL,GACtC2D,EAAEC,UAAY5D,GAAYK,IAASL,GACnC2D,EAAEC,UAAY5D,GAAcK,IAASL,IAEtCM,EAAWqD,EAAEC,SAsGCC,CAAcF,IAC9BG,IAAK,SAACA,GACAA,IACFhE,EAAYgE,GACFC,SAGdnE,MA7NU0D,IA8NV3D,OA7NW2D,OCsCFU,MA3Cf,WAAgB,IAAD,EACetF,mBAAS,QADxB,mBACNuF,EADM,KACEC,EADF,OAEaxF,mBAAS,GAFtB,mBAENyF,EAFM,KAECC,EAFD,KAKPC,EACE,OADFA,EAEM,WAGNC,EAAc,SAACxD,GACnBsD,GAAS,SAACD,GAAD,OAAWA,EAAQrD,MAGxByD,EAAe,SAACC,GACpBN,EAAUM,IAoBZ,OACE,yBAAKtG,UAAU,OACb,4BAAK+F,IAAWI,EAAX,iBAAwCF,GAAU,YAnBzC,WAChB,OAAQF,GACN,KAAKI,EACH,OAAO,kBAAC,EAAD,CAAM7F,eAAgB+F,EAAc9F,OAAQ4F,IACrD,KAAKA,EACH,OACE,kBAAC,EAAD,CACEtE,QAASuE,EACT9F,eAAgB+F,EAChB9F,OAAQ4F,IAGd,QACE,OAAO,kBAAC,EAAD,CAAM7F,eAAgB+F,EAAc9F,OAAQ4F,KAOpDI,KChCaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.25bcfdad.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./LeftArrow.scss\";\n\nexport function LeftArrow(props) {\n  const active = props.active;\n\n  return (\n    <svg\n      className={active ? \"LeftArrow\" : \"LeftArrow inactive\"}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n    >\n      <path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\" />\n      <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    </svg>\n  );\n}\n","import React, { useState } from \"react\";\n\nimport \"./Menu.scss\";\nimport { LeftArrow } from \"../shared/left_arrow/LeftArrow\";\n\nfunction Menu({ onUpdateScreen, idMenu }) {\n  const [option, setOption] = useState(null);\n  const menuOpts = [\"NEW GAME\"];\n\n  const activeMenu = (i) => {\n    setOption(i);\n  };\n\n  const renderMenus = () => {\n    let menus = [];\n    for (let i = 0; i < menuOpts.length; i++) {\n      menus.push(\n        <h1\n          key={i}\n          onMouseEnter={() => activeMenu(i)}\n          onMouseLeave={() => activeMenu(null)}\n          onClick={() => onUpdateScreen(idMenu)}\n        >\n          {<LeftArrow active={i === option} />}\n          {menuOpts[i]}\n        </h1>\n      );\n    }\n\n    return menus;\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"menu-wrapper\">\n        <div>{renderMenus()}</div>\n      </div>\n      <a\n        href=\"https://github.com/Danny908/Tic-Tac-Toe-MiniMax\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <svg height=\"60\" viewBox=\"0 0 16 16\" width=\"60\">\n          <path\n            fill=\"#ffffff\"\n            d=\"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\"\n          ></path>\n        </svg>\n      </a>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, { useState, useEffect } from \"react\";\nimport \"./GameBoard.scss\";\n\nfunction GameBoard({ onScore, onUpdateScreen, idMenu }) {\n  let canvasRef;\n  // Set canvas size on desired tiles numbers\n  const tile = 25;\n  // Set number of tiles on game board\n  const tilesX = 40;\n  const tilesY = 30;\n  const width = tile * tilesX;\n  const height = tile * tilesY;\n  // Game tick speed on ms\n  const tick = 200;\n  // Game controls keycode\n  const ctrls = {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n  };\n  // Snake initial state on the middle of the board\n  const [snake, setSnake] = useState([\n    { x: 17, y: 15 },\n    { x: 18, y: 15 },\n    { x: 19, y: 15 },\n    { x: 20, y: 15 },\n  ]);\n  // Active control direction\n  const [ctrl, setControl] = useState(ctrls.RIGHT);\n  const [food, setFood] = useState(null);\n  const [end, setEnd] = useState(false);\n\n  const draw = () => {\n    const ctx = canvasRef.getContext(\"2d\");\n    // Clean canvas on every update\n    ctx.beginPath();\n    ctx.fillStyle = \"#262931\";\n    ctx.fillRect(0, 0, width, height);\n    drawSnake(ctx);\n    drawFood(ctx);\n    if (end) {\n      gameOver(ctx);\n    }\n  };\n\n  const drawSnake = (ctx) => {\n    // Draw snake on canvas\n    snake.forEach((s, i) => {\n      ctx.beginPath();\n      ctx.fillStyle = i === snake.length - 1 ? \"#57ba59\" : \"whitesmoke\";\n      ctx.strokeStyle = \"#262931\";\n      const x = tile * s.x;\n      const y = tile * s.y;\n      ctx.fillRect(x, y, tile, tile);\n      ctx.strokeRect(x, y, tile, tile);\n    });\n  };\n\n  // Update snake head, apear on other side if board edge reached\n  const snakeMove = (head) => {\n    let { x, y } = head;\n    switch (ctrl) {\n      case ctrls.LEFT:\n        x = x - 1 < 0 ? tilesX - 1 : x - 1;\n        break;\n      case ctrls.UP:\n        y = y - 1 < 0 ? tilesY - 1 : y - 1;\n        break;\n      case ctrls.RIGHT:\n        x = x + 1 > tilesX - 1 ? 0 : x + 1;\n        break;\n      case ctrls.DOWN:\n        y = y + 1 > tilesY - 1 ? 0 : y + 1;\n        break;\n      default:\n        x = x + 1 > tilesX - 1 ? 0 : x + 1;\n        break;\n    }\n    return { x, y };\n  };\n\n  const updateSnake = () => {\n    const _snake = snake.map((s, i) => {\n      if (i + 1 < snake.length) {\n        s = snake[i + 1];\n      } else {\n        s = snakeMove(s);\n      }\n      return s;\n    });\n\n    // End game if snake eats itself\n    if (\n      _snake.some((s, i) => {\n        if (i !== _snake.length - 1) {\n          return (\n            JSON.stringify(_snake[_snake.length - 1]) === JSON.stringify(s)\n          );\n        }\n        return false;\n      })\n    ) {\n      setEnd(true);\n    }\n    setSnake(_snake);\n  };\n\n  const tickFn = () =>\n    setInterval(() => {\n      updateSnake();\n    }, tick);\n\n  const keyboardCtrls = (e) => {\n    if (e.keyCode !== ctrl) {\n      // Control limitations\n      if (\n        (e.keyCode === ctrls.LEFT && ctrl !== ctrls.RIGHT) ||\n        (e.keyCode === ctrls.RIGHT && ctrl !== ctrls.LEFT) ||\n        (e.keyCode === ctrls.UP && ctrl !== ctrls.DOWN) ||\n        (e.keyCode === ctrls.DOWN && ctrl !== ctrls.UP)\n      ) {\n        setControl(e.keyCode);\n      }\n    }\n  };\n\n  const randomizer = (limit) => {\n    // if limit = 10 will return (0 - 9)\n    return Math.floor(Math.random() * limit);\n  };\n\n  const updateFood = () => {\n    const x = randomizer(tilesX);\n    const y = randomizer(tilesY);\n    // 1 of 10 to be special food\n    const special = randomizer(10) === 5 ? true : false;\n\n    // If food generates on a tile use by the snake, generate food again\n    if (snake.some((s) => JSON.stringify(s) === JSON.stringify({ x, y }))) {\n      updateFood();\n    }\n    setFood({ x, y, special });\n  };\n\n  const drawFood = (ctx) => {\n    let x;\n    let y;\n\n    // Check if food exist\n    if (food) {\n      x = tile * food.x;\n      y = tile * food.y;\n      ctx.beginPath();\n      ctx.fillStyle = food.special ? \"yellow\" : \"red\";\n      ctx.fillRect(x, y, tile, tile);\n    }\n  };\n\n  // Detect is state A is hittin B\n  const collition = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n  };\n\n  // Check if food was eaten\n  const isFoodEaten = () => {\n    if (collition(snake[snake.length - 1], { x: food.x, y: food.y })) {\n      // New snake instance\n      const _snake = snake.map((s) => s);\n      // Reset foold\n      setFood(null);\n      // Update Score\n      onScore(food.special ? 5 : 1);\n      // Update snake size\n      _snake.unshift(_snake[0]);\n      setSnake(_snake);\n    }\n  };\n\n  // Game over message\n  const gameOver = (ctx) => {\n    const txt = \"GAME OVER :(\";\n    ctx.beginPath();\n    ctx.font = \"bold 50px Arial\";\n    ctx.fillStyle = \"whitesmoke\";\n    ctx.strokeStyle = \"#262931\";\n    const { width: txtWidth } = ctx.measureText(txt);\n    ctx.fillText(txt, width / 2 - txtWidth / 2, 400);\n    ctx.strokeText(txt, width / 2 - txtWidth / 2, 400);\n\n    // Return to main screen\n    setTimeout(() => onUpdateScreen(idMenu), 1200);\n  };\n\n  useEffect(() => {\n    // Generate food\n    if (!food) {\n      updateFood();\n    }\n  }, [food]);\n\n  useEffect(() => {\n    // Move snake if control direction change\n    updateSnake();\n  }, [ctrl]);\n\n  useEffect(() => {\n    let interval;\n    if (!end) {\n      // tickFn instance\n      interval = tickFn();\n    }\n    // If food on the board check if eaten\n    if (food) {\n      isFoodEaten();\n    }\n    // Update canvas on each state change\n    draw();\n    return () => clearInterval(interval);\n  });\n\n  return (\n    <canvas\n      tabIndex=\"0\"\n      onKeyUp={(e) => keyboardCtrls(e)}\n      ref={(ref) => {\n        if (ref) {\n          canvasRef = ref;\n          canvasRef.focus();\n        }\n      }}\n      width={width}\n      height={height}\n    ></canvas>\n  );\n}\n\nexport default GameBoard;\n","import React, { useState } from \"react\";\n\nimport \"./App.scss\";\nimport Menu from \"./menu/Menu\";\nimport GameBoard from \"./game-board/GameBoard\";\n\nfunction App() {\n  const [screen, setScreen] = useState(\"menu\");\n  const [score, setScore] = useState(0);\n\n  // Menu options\n  const screens = {\n    MENU: \"MENU\",\n    NEW_GAME: \"NEW GAME\",\n  };\n  // Update score\n  const updateScore = (s) => {\n    setScore((score) => score + s);\n  };\n\n  const updateScreen = (val) => {\n    setScreen(val);\n  };\n\n  const getScreen = () => {\n    switch (screen) {\n      case screens.MENU:\n        return <Menu onUpdateScreen={updateScreen} idMenu={screens.NEW_GAME} />;\n      case screens.NEW_GAME:\n        return (\n          <GameBoard\n            onScore={updateScore}\n            onUpdateScreen={updateScreen}\n            idMenu={screens.MENU}\n          />\n        );\n      default:\n        return <Menu onUpdateScreen={updateScreen} idMenu={screens.NEW_GAME} />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>{screen === screens.NEW_GAME ? `SCORE: ${score}` : \"SNAKE JS\"}</h1>\n      {getScreen()}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}